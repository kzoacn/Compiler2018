class Edge{
    int to;
    int next;
}

Edge[] e;
int ne = 0;
int n = 0;
int[] head;
int ans = 0;
int size = 0;
int i = 0;

void add(int from, int to){
    ++ne;
    e[ne].to = to;
    e[ne].next = head[from];
    head[from] = ne;
}

bool[] visit;
int[] son;
int[] maxson;

void init(){
    e = new Edge[100];
    ne = 0;
    ans = 0;
    size = n;
    visit = new bool[100];
    son = new int[100];
    maxson = new int[100];
    head = new int[100];
    
    for (i = 0; i <100; ++ i)    
        e[i]=new Edge();
        
    for (i = 0; i <= n; ++ i){
        visit[i] = false;
        son[i] = 0;
        maxson[i] = 0;
        head[i] = 0;
    }
}

int max(int a, int b){
    if (a > b) return a;
    else return b;
}

void dfs(int u){
    int tmp = 0;
    visit[u] = true;
    int i;
    for (i = head[u]; i != 0; i = e[i].next){
        int v = e[i].to;
        if (visit[v]==false) {
            dfs(v);
            son[u] = son[u] + (son[v] + 1);
            tmp = max(tmp, son[v] + 1);
        }
    }
    tmp = max(tmp, n - son[u] - 1);
    if (tmp < size || (tmp == size && u < ans)){
       ans = u;
       size = tmp;
       }
}

int[] eu=new int[7];
int[] ev=new int[7];

int main(){
    eu[0]=2;ev[0]=6;
    eu[1]=1;ev[1]=2;
    eu[2]=2;ev[2]=4;
    eu[3]=4;ev[3]=5;
    eu[4]=3;ev[4]=7;
    eu[5]=3;ev[5]=1;
    int t;
    t = 1;
    while((t--) != 0){
        n = 7;
        init();
        for (i = 0; i < n-1; ++i){
            int u;
            int v;
            u = eu[i];
            v = ev[i];
            add(u,v);
            add(v,u);
        }
        dfs(1);
        println(toString(ans));
        println(toString(size));
    }


    return 0;
}

